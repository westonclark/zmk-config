/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        combo_quote: combo_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "COMBO_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        combo_right_bracket: combo_right_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "COMBO_RIGHT_BRACKET";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        combo_left_bracket: combo_left_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "COMBO_LEFT_BRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        RESET {
            bindings = <&sys_reset>;
            key-positions = <12 17>;
        };

        qw_tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        as_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <10 11>;
        };

        zx_ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <20 21>;
        };

        xc_option {
            bindings = <&kp LALT>;
            key-positions = <21 22>;
        };

        slash_dot_ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <29 28>;
        };

        dot_comma_option {
            bindings = <&kp RALT>;
            key-positions = <28 27>;
        };

        cv_left_gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <22 23>;
        };

        m_comma_right_gui {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <26 27>;
        };

        l_semicolon_quote {
            bindings = <&combo_quote>;
            key-positions = <18 19>;
        };

        o_p_right_bracket {
            bindings = <&combo_right_bracket>;
            key-positions = <8 9>;
        };

        i_o_left_bracket {
            bindings = <&combo_left_bracket>;
            key-positions = <7 8>;
        };

        yu_left_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <5 6>;
        };

        ui_right_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
  &kp Q        &kp W           &kp E               &kp R                    &kp T          &kp Y            &kp U                     &kp I                &kp O            &kp P
  &kp A        &kp S           &kp D               &kp F                    &kp G          &kp H            &kp J                     &kp K                &kp L            &kp SEMICOLON
  &kp Z        &kp X           &kp C               &kp V                    &kp B          &kp N            &kp M                     &kp COMMA            &kp PERIOD       &kp SLASH
                               &mo 1             &kp LEFT_SHIFT           &kp BACKSPACE   &kp ENTER      &kp SPACE                &mo 2
            >;
        };

        arrow_layer {
            label = "ARROW";
            bindings = <
  &trans       &trans          &trans              &trans                   &trans         &trans           &trans                    &trans               &trans           &trans
  &trans       &trans          &trans              &trans                   &trans         &kp LEFT         &kp DOWN                  &kp UP               &kp RIGHT        &trans
  &trans       &trans          &trans              &trans                   &trans         &trans           &trans                    &trans               &trans           &trans
                               &trans              &trans                   &trans         &trans           &trans                   &trans
            >;
        };

        numpad_layer {
            label = "NUM";
            bindings = <
  &kp EXCL     &kp AT          &kp HASH            &kp DOLLAR               &kp PERCENT    &kp CARET        &kp N7                    &kp N8               &kp N9           &kp PLUS
  &kp AMPS     &kp STAR        &trans              &trans                   &trans         &trans           &kp N4                    &kp N5               &kp N6           &kp UNDER
  &trans       &trans          &trans              &trans                   &trans         &kp N0           &kp N1                    &kp N2               &kp N3           &kp EQUAL
                               &trans              &trans                   &trans         &trans           &trans                   &trans
            >;
        };
    };
};
